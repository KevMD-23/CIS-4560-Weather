--Upload the ZIP file to HDFS
hdfs dfs -mkdir -p /user/kduran26/us_weather
hdfs dfs -put Weather_Dataset_US.zip /user/kduran26/us_weather/


unzip Weather_Dataset_US.zip -d ~/us_weather_extracted
hdfs dfs -mkdir -p /user/kduran26/us_weather/csv_raw_weather
hdfs dfs -put ~/us_weather_extracted/Weather\ Data\ \(US\).csv /user/kduran26/us_weather/csv_raw_weather/



--Create Hive Raw Table
Beeline:

USE kduran26;

DROP TABLE IF EXISTS weather_raw;

CREATE EXTERNAL TABLE weather_raw (
  id STRING,
  `date` STRING,
  tmax STRING,
  tmin STRING,
  evap STRING,
  prcp STRING,
  latitude STRING,
  longitude STRING,
  elevation STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE
LOCATION '/user/kduran26/us_weather/csv_raw_weather/'
TBLPROPERTIES ("skip.header.line.count"="1");
--Create Cleaned Hive Table (2010â€“2020)

DROP TABLE IF EXISTS weather_cleaned;

CREATE TABLE weather_cleaned AS
SELECT
  id,
  `date`,
  CAST(tmax AS INT) AS tmax_tenths,
  CAST(tmin AS INT) AS tmin_tenths,
  CAST(prcp AS INT) AS prcp_tenths,
  CAST(latitude AS DOUBLE) AS latitude,
  CAST(longitude AS DOUBLE) AS longitude,
  CAST(elevation AS DOUBLE) AS elevation,

  (CAST(tmax AS FLOAT) + CAST(tmin AS FLOAT)) / 20.0 AS avg_temp_celsius,
  (CAST(tmax AS FLOAT) - CAST(tmin AS FLOAT)) / 10.0 AS temp_range_celsius,

  CASE
    WHEN (CAST(tmax AS FLOAT) + CAST(tmin AS FLOAT)) / 20.0 < 5 THEN 'COLD'
    WHEN (CAST(tmax AS FLOAT) + CAST(tmin AS FLOAT)) / 20.0 BETWEEN 5 AND 25 THEN 'MODERATE'
    WHEN (CAST(tmax AS FLOAT) + CAST(tmin AS FLOAT)) / 20.0 > 25 THEN 'HOT'
    ELSE 'UNKNOWN'
  END AS avg_temp_label,

  CASE
    WHEN (CAST(tmax AS FLOAT) - CAST(tmin AS FLOAT)) / 10.0 < 5 THEN 'STABLE'
    WHEN (CAST(tmax AS FLOAT) - CAST(tmin AS FLOAT)) / 10.0 BETWEEN 5 AND 15 THEN 'NORMAL RANGE'
    WHEN (CAST(tmax AS FLOAT) - CAST(tmin AS FLOAT)) / 10.0 > 15 THEN 'EXTREME RANGE'
    ELSE 'UNKNOWN'
  END AS temp_range_volatility

FROM weather_raw

WHERE tmax IS NOT NULL AND tmax != ''
  AND tmin IS NOT NULL AND tmin != ''
  AND prcp IS NOT NULL AND prcp != ''
  AND latitude IS NOT NULL AND latitude != ''
  AND longitude IS NOT NULL AND longitude != ''
  AND `date` RLIKE '^[0-9]{1,2}/[0-9]{1,2}/20(1[0-9]|20)$';
--Gent Matched Station IDs


INSERT OVERWRITE DIRECTORY '/user/kduran26/us_weather/matched_station_ids'
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '\n'
SELECT DISTINCT id FROM weather_cleaned;
--Filter and Clean NOAA Station Metadata

--Extract only station IDs present in cleaned data
hdfs dfs -get /user/kduran26/us_weather/matched_station_ids ./matched_station_ids
cat matched_station_ids/000000_0 > matched_station_ids.txt

--Filter the NOAA metadata file
grep -Ff matched_station_ids.txt ghcnd-stations.txt > ghcnd-matched.txt

--Extract valid station_id,state pairs
awk '{if ($6 ~ /^[A-Z]{2}$/) print $1 "," $6}' ghcnd-matched.txt > station_state_verified.csv
--Upload Station Lookup and Create Hive Table


hdfs dfs -rm -r /user/kduran26/us_weather/station_lookup
hdfs dfs -mkdir -p /user/kduran26/us_weather/station_lookup
hdfs dfs -put station_state_verified.csv /user/kduran26/us_weather/station_lookup/


In Beeline:

DROP TABLE IF EXISTS station_lookup;

CREATE EXTERNAL TABLE station_lookup (
  station_id STRING,
  state STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE
LOCATION '/user/kduran26/us_weather/station_lookup/';
--Join and Export Final Dataset with State


INSERT OVERWRITE DIRECTORY '/user/kduran26/us_weather/weather_with_state'
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
SELECT w.*, s.state
FROM weather_cleaned w
JOIN station_lookup s
ON TRIM(w.id) = TRIM(s.station_id);
--Create Final CSV with Header


--Remove any prior copies
rm -r weather_with_state

--Get from HDFS
hdfs dfs -get /user/kduran26/us_weather/weather_with_state ./weather_with_state

--Merge and add header
echo "id,date,tmax_tenths,tmin_tenths,prcp_tenths,latitude,longitude,elevation,avg_temp_celsius,temp_range_celsius,avg_temp_label,temp_range_volatility,state" > weather_2010_2020_with_state.csv

cat weather_with_state/* >> weather_2010_2020_with_state.csv
--Download CSV to Your Computer

From local terminal:

scp kduran26@144.24.46.199:/home/kduran26/weather_2010_2020_with_state.csv ~/Downloads/
